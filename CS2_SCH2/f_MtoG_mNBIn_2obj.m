% gams-matlab interface:  inputcs2_nbi.gdx
% https://www.youtube.com/watch?v=s755kr8MH0Y)
% A gdx file only accept structure format.
% gdxInfo tmp

function [objs, n_groups, properties, tWall, tCPU] ...
        = f_MtoG_mNBIn_2obj(weight, beta1, normal1, phi1, fo1, fk1, icut1,dim,n_dim, n_sobol,flag_b)

    % initial guesses generated by sobol' sequence
    % manually include the value, sorry for this.
    
    data_x_i=[0,0;2.5,1.5;1.25,2.25;1.875,1.125;3.125,0.375;0.625,1.875 ; ...
        0.9375,0.9375;2.1875,1.6875;1.5625,0.5625;2.8125,1.3125;0.3125,2.8125; ...
        0.46875,1.40625;1.71875,2.15625;2.34375,0.28125;1.09375,2.53125;0.78125,0.46875; ...
        1.40625,0.84375;2.65625,0.09375;0.15625,1.59375;0.234375,0.796875;...
        1.48438,1.54688;2.10938,0.421875;3.35938,1.17188;0.859375,2.67188;...
        1.17188,0.234375;1.79688,1.35938;3.04688,0.609375;0.546875,2.10938;...
        0.390625,0.703125;2.26563,1.07813;3.51563,0.328125;1.01563,1.82813;0.703125,1.26563;...
        1.95313,2.01563	;1.32813,0.140625;2.57813,0.890625;0.078125,2.39063;0.117188,1.19531];
    
    
   %data_x_i(n_sobol-1,:)= n_groups_ini(1,:);
   %data_x_i(n_sobol,:)= n_groups_ini(2,:);
   
    objs_i=[]; n_groups_i=[]; properties_i=[]; tWall_i=[]; tCPU_i=[]; fail_i=[];
    
 for i=1:n_sobol
     data_initial = data_x_i(i,:);
%==========================================================================
% (1) Assign values from Matlab
%==========================================================================
    if nargin > 4
       data_w = weight;
       data_beta = beta1;
       data_norm = normal1;
       data_phi = phi1;
       data_fo = fo1;
       data_fk = fk1;
    
       
    elseif nargin == 3
        data_w = [1 0]; % default value
        data_beta = beta1;
        data_norm = normal1;
    else 
        data_w = [1 0 ];    % default value
        data_beta = [0.5 0.5]; % default value  
        data_norm = [-0.7071, 0]; % default value
        data_fo = [-6, 0 ];
        data_phi = [ 6  0;  0  1];
    end

%==========================================================================
% (2) Write GAMS gdx file that interfaces with MATLAB
%==========================================================================
  tWall_initial = cputime;

    % sets
    i    = GAMS.set('i', {'i1','i2'});
    j    = GAMS.set('j', {'j1','j2'});
    m    = GAMS.set('m', 1:size(data_beta,2));
    %c    = GAMS.set('c', 1:size(data_icut,1));

 
  % parameters: ex. P = GAMS.param(name, vals, onsets, form)
    beta    = GAMS.param('beta',data_beta,m.uels);
    %w       = GAMS.param('w', data_w,i.uels);
    normal  = GAMS.param('normal', data_norm,i.uels);
    phi     = GAMS.param('phi',data_phi, [i.uels m.uels]);
    f_o     = GAMS.param('f_o',data_fo,i.uels);
    f_k     = GAMS.param('f_k',data_fk,[i.uels m.uels]);
    %icut    = GAMS.param('yv', data_icut,[c.uels j.uels]);
    x_i     = GAMS.param('x_i',data_initial,j.uels);

    
    % write to GDX file
    GAMS.putGDX('inputcs2_nbin.gdx',i,j,m,beta,normal,phi,f_o,f_k,x_i);

%==========================================================================
% (3) Run GAMS: --.gms
%==========================================================================

    if flag_b ==3;
       g = GAMS(struct('model','mNBIn_a_CS2.gms'));
    elseif flag_b ==4;
       g = GAMS(struct('model','mNBIn_b_CS2.gms'));
    end
    
    g.run; % executes "gams.exe fuelstation.gms -GDX=result.gdx"


%==========================================================================
% (3) Write GAMS gdx file that interfaces with MATLAB
%==========================================================================

    % read result variable x if run successful
    if g.status == 0

        % Read from text and store
        status1 = copyfile('NBI_CS2_result_n.txt', 'results2.txt');
        if flag_b ==3 ;
            status2 = copyfile('mNBIn_a_CS2.log', 'log2.txt');
        elseif flag_b == 4;
            status2 = copyfile('mNBIn_b_CS2.log', 'log2.txt');
        end 
        if status1 == 1
         fid  = fopen('results2.txt','r');
         
         buffer = fgetl(fid);
         data_resulto = fgetl(fid);

         
         data_result = textscan(data_resulto, '%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f', 'Delimiter', ':');
         store = cell2mat(data_result(1,1:end)); 
         fclose(fid); 
         delete('results2.txt');
         delete('NBI_CS2_result_n.txt');

         failtest = store(1,end);
         fail_i(end+1,:) = failtest;
         tCPU_i(end+1,:) = store(1,end-2);
         tWall_i(end+1,:) = cputime - tWall_initial;  
         
         if ~(failtest==1 || failtest==2 || failtest==8 || failtest==15 || failtest==16)
            continue
         end      
         
         objs_i(end+1,:)       = store(1,1:2);
         n_groups_i(end+1,:)   = store(1,3:4);
         properties_i(end+1,:) = [store(1,5:end-3)]; 
          
         

        end
   

    end
 end
 
        [M, index] = max(properties_i(:,1));
         objs       = objs_i(index,:);
         n_groups   = n_groups_i(index,:);
         properties = properties_i(index,:); 
         tCPU       = sum(tCPU_i);
         tWall      = sum(tWall_i);  
end



